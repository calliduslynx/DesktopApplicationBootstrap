// ***********************************
// ***** kotlin build part
// ***********************************
buildscript {
    ext.kotlin_version = '1.3.61'
    ext.jvm_target = '1.8'

    repositories {
        mavenCentral()                  // <-- required by kotlin
        jcenter()                       // <-- required by launch4j
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'edu.sc.seis.gradle:launch4j:2.4.6'
    }
}

// ***********************************
// ***** plugins
// ***********************************
apply plugin: "kotlin"
apply plugin: "java"
apply plugin: "application"             // <-- provides "run" - task
apply plugin: "edu.sc.seis.launch4j"    // <-- https://github.com/TheBoegl/gradle-launch4j

// ***********************************
// ***** parameters
// ***********************************

group = "de.mabe.catstore"
mainClassName = "de.mabe.catstore.MainKt"


// ***********************************
// ***** launch4j
// ***********************************
launch4j {
    outfile = "Catstore.exe"
    mainClassName = this.mainClassName
    icon = "${projectDir}/src/main/resources/catstore.ico"
    bundledJrePath = "./java"
}

task exe {
    dependsOn 'createExe', 'copyJre', 'createZipFile'
}

/** unzips the jre */
task copyJre(type: Copy) {
    def zipFile = file('./jre/java.zip')
    from zipTree(zipFile).matching { include "*/**" }
    into file('build/launch4j/java')
    eachFile { fcp -> fcp.path = fcp.path.replaceFirst("^[^/]*/", '/') }
    includeEmptyDirs false

    mustRunAfter 'createExe'
}

task createZipFile(type: Zip) {
    from './build/launch4j'
    include '**'
    archiveName launch4j.outfile.replace(".exe", ".zip")
    destinationDir(file('./build/launch4j-zip'))

    mustRunAfter 'copyJre'
}


// ***********************************
// ***** configuration
// ***********************************
sourceCompatibility = jvm_target
targetCompatibility = jvm_target

compileKotlin {
    kotlinOptions {
        apiVersion = "1.3"
        languageVersion = "1.3"
        jvmTarget = jvm_target
    }
}
compileTestKotlin {
    kotlinOptions {
        apiVersion = "1.3"
        languageVersion = "1.3"
        jvmTarget = jvm_target
    }
}

tasks.withType(Test) {
    testLogging {
        events /*'started',*/ 'passed', 'failed'
        exceptionFormat = 'full'
        afterSuite { desc, result -> if (!desc.parent) println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" }
    }
}

// ***********************************
// ***** dependencies
// ***********************************
repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"                        // Kotlin support
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.slf4j:log4j-over-slf4j:1.7.21"                                     // Logs
    implementation 'org.apache.commons:commons-lang3:3.4'

    testImplementation 'junit:junit:4.12'
}